import { test, expect, APIRequestContext, Page } from '@playwright/test';

const BASE_URL = 'https://demoqa.com';
const PASSWORD = 'Jv3@pQ!8';
const username = `user_${Date.now()}`;

let userId: string;
let authToken: string;

test.describe('JWT –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è: –ø–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, –ª–æ–≥—ñ–Ω—É —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è', () => {

  test.beforeAll(async ({ request }) => {
    const createResponse = await request.post(`${BASE_URL}/Account/v1/User`, {
      data: {
        userName: username,
        password: PASSWORD,
      },
    });

    expect(createResponse.status()).toBe(201);
    const responseBody = await createResponse.json();
    userId = responseBody.userID;

    console.log(`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${username} (ID: ${userId})`);
  });

  test('UI –ª–æ–≥—ñ–Ω —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ API', async ({ page }) => {
    await page.goto(`${BASE_URL}/login`);

    const loginResponsePromise = page.waitForResponse('**/Account/v1/Login');

    await page.getByPlaceholder('UserName').fill(username);
    await page.getByPlaceholder('Password').fill(PASSWORD);
    await page.getByRole('button', { name: 'Login' }).click();

    const loginResponse = await loginResponsePromise;
    const loginData = await loginResponse.json();

    expect(loginResponse.ok()).toBeTruthy();
    expect(loginData).toHaveProperty('token');

    authToken = loginData.token;
    console.log(`‚úÖ –¢–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ: ${authToken}`);

    const profileResponse = await page.request.get(`${BASE_URL}/Account/v1/User/${userId}`, {
      headers: {
        Authorization: `Bearer ${authToken}`,
      },
    });

    expect(profileResponse.ok()).toBeTruthy();
    const profileData = await profileResponse.json();

    expect(profileData.username).toBe(username);
    console.log(`‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: ${profileData.username}`);
  });

  test.afterAll(async ({ request }) => {
    if (!authToken || !userId) {
      console.warn('‚ö†Ô∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–µ ‚Äî —Ç–æ–∫–µ–Ω –∞–±–æ userId –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ.');
      return;
    }

    const deleteResponse = await request.delete(`${BASE_URL}/Account/v1/User/${userId}`, {
      headers: {
        Authorization: `Bearer ${authToken}`,
      },
    });

    if (deleteResponse.status() === 204) {
      console.log(`üóëÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ (ID: ${userId})`);
    } else {
      console.error(`‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è: ${deleteResponse.status()} ${deleteResponse.statusText()}`);
    }

    expect([204, 401]).toContain(deleteResponse.status());
  });
});
