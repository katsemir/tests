import { test, expect } from '@playwright/test';

const baseUrl = 'https://demoqa.com';
const username = `katsemir_${Math.floor(Math.random() * 10000)}`; // –£–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º‚Äô—è
const password = 'Jv3@pQ!8';

let token: string;
let userId: string;

test.describe('–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ 3: –ü–æ–≤–Ω–∏–π —Ü–∏–∫–ª (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è -> –ª–æ–≥—ñ–Ω -> –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ -> –≤–∏–¥–∞–ª–µ–Ω–Ω—è)', () => {

  test.beforeAll(async ({ request }) => {
    const response = await request.post(`${baseUrl}/Account/v1/User`, {
      data: {
        userName: username,
        password: password,
      },
    });

    expect(response.status()).toBe(201);
    const data = await response.json();
    userId = data.userID;
    console.log(`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: ${username} (ID: ${userId})`);
  });

  test('–õ–æ–≥—ñ–Ω —á–µ—Ä–µ–∑ UI, –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é', async ({ page }) => {
    await page.goto(`${baseUrl}/login`);

    const responsePromise = page.waitForResponse('**/Account/v1/Login');

    await page.getByPlaceholder('UserName').fill(username);
    await page.getByPlaceholder('Password').fill(password);
    await page.getByRole('button', { name: 'Login' }).click();

    const response = await responsePromise;
    const loginData = await response.json();

    expect(response.ok()).toBeTruthy();
    expect(loginData).toHaveProperty('token');

    token = loginData.token;
    console.log(`‚úÖ –¢–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ: ${token}`);

    const profileResponse = await page.request.get(`${baseUrl}/Account/v1/User/${userId}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    });

    expect(profileResponse.ok()).toBeTruthy();
    const profile = await profileResponse.json();
    expect(profile.username).toBe(username);
    console.log(`‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: ${profile.username}`);
  });

  test.afterAll(async ({ request }) => {
    if (!token || !userId) {
      console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: —Ç–æ–∫–µ–Ω –∞–±–æ userId –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ.');
      return;
    }

    const response = await request.delete(`${baseUrl}/Account/v1/User/${userId}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    });

    if (response.status() === 204) {
      console.log(`üóëÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–µ–Ω–∏–π (ID: ${userId})`);
    } else {
      console.log(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏: ${response.status()} ${response.statusText()}`);
    }

    expect([204, 401]).toContain(response.status());
  });
});
